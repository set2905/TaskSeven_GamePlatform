@page "/tictactoe"
@using TaskSeven_GamePlatform.Client.Services.Interfaces;
@using TaskSeven_GamePlatform.Shared.Models;
@inject ITicTacToeClientService TTTClient
@inject IPlayerClientService PlayerService
@inject IHubTicTacToeClient TTTHub
@inject ISnackbar Snackbar


<PageTitle>Tic Tac Toe</PageTitle>
<MudOverlay @bind-Visible="isLoading" DarkBackground="true">
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" Style="width:50vw" />
    @*<MudText Typo="Typo.h1">@loadingMessage</MudText>*@
</MudOverlay>
<MudGrid>
    <MudItem xs="12">
        <MudPaper Style="height:80vh" Class="d-flex align-center justify-center mud-height-full mud-width-full py-8">
            <MudGrid>
                <MudItem xs="2">
                </MudItem>
                <MudItem Class="d-flex flex-column align-center justify-center" xs="8">
                    <div class="game">
                        <div class="board">
                            <div class="square top left" tabindex="0">
                                <div class="x">
                                </div>
                            </div>
                            <div class="square top" tabindex="0">
                                <div class="">
                                </div>
                            </div>
                            <div class="square top right" tabindex="0">
                                <div class="">
                                </div>
                            </div>
                            <div class="square left" tabindex="0">
                                <div class="">
                                </div>
                            </div>
                            <div class="square" tabindex="0">
                                <div class="">
                                </div>
                            </div>
                            <div class="square right" tabindex="0">
                                <div class="o">
                                </div>
                            </div>
                            <div class="square bottom left" tabindex="0">
                                <div class="">
                                </div>
                            </div>
                            <div class="square bottom" tabindex="0">
                                <div class="">
                                </div>
                            </div>
                            <div class="square bottom right" tabindex="0">
                                <div class="">
                                </div>
                            </div>
                        </div>
                        <div class="restart style-tRTxS" id="style-tRTxS">
                        </div>
                    </div>
                </MudItem>
                <MudItem xs="2">
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

</MudGrid>



@code {
    private bool isLoading = true;
    private string loadingMessage = "Loading...";
    private GameState? currentGameState;
    private Guid gameTypeId;
    private Player? me;
    protected override async Task OnInitializedAsync()
    {
        me = await PlayerService.SetPlayerName(new(Guid.NewGuid().ToString()));
        string ConnectionId = await TTTHub.Initialize();
        await PlayerService.SetPlayerConnectionId(new(ConnectionId, me.Id));
        TTTHub.OnGameStateUpdate += UpdateGameState;
        TTTHub.OnOpponentFound += HandleOpponentFound;
        gameTypeId = Guid.Parse("706C2E99-6F6C-4472-81A5-43C56E11637C");
        Player? opponent = await TTTClient.StartGameSearch(new(me.Id, gameTypeId));
        loadingMessage = "looking for opponent...";
        if (opponent!=null)
        {
            Snackbar.Add($"Opponent found! Say hi to {opponent.Name}.", Severity.Success);
            await TTTHub.NotifyFoundYou(opponent.ConnectionId, me.Id);
            isLoading = false;

        }
    }

    private async Task UpdateGameState()
    {
        if (currentGameState == null) return;
        await UpdateGameState(currentGameState.Id);
    }
    private async Task UpdateGameState(Guid gameStateId)
    {
        if (currentGameState == null) return;
        GameState? recievedState = await TTTClient.GetGameState(gameStateId);
        if (recievedState == null) return;
        currentGameState = recievedState;
    }
    private async Task HandleOpponentFound(Guid opponentId)
    {
        Snackbar.Add($"Opponent found!{opponentId}", Severity.Success);
        Guid? gameStateId = await TTTClient.StartGame(new(me.Id, opponentId, gameTypeId));
        if (gameStateId!=null)
            isLoading = false;

    }

}
