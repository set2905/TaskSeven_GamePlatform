@page "/tictactoe"
@using TaskSeven_GamePlatform.Client.Services.Interfaces;
@using TaskSeven_GamePlatform.Shared.Models;
@inject ITicTacToeClientService TTTClient
@inject IPlayerClientService PlayerService
@inject IHubTicTacToeClient TTTHub
@inject ISnackbar Snackbar


<PageTitle>Tic Tac Toe</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>


@code {
    private GameState? currentGameState;
    private Guid gameTypeId;
    private Player? me;
    protected override async Task OnInitializedAsync()
    {
        me = await PlayerService.SetPlayerName(new(Guid.NewGuid().ToString()));
        string ConnectionId = await TTTHub.Initialize();
        await PlayerService.SetPlayerConnectionId(new(ConnectionId, me.Id));
        TTTHub.OnGameStateUpdate += UpdateGameState;
        TTTHub.OnOpponentFound += HandleOpponentFound;

        Player? opponent = await TTTClient.StartGameSearch(new(me.Id, Guid.Parse("706C2E99-6F6C-4472-81A5-43C56E11637C")));
        if (opponent!=null)
        {
            Snackbar.Add($"Opponent found! Say hi to {opponent.Name}.", Severity.Success);
            await TTTHub.NotifyFoundYou(opponent.ConnectionId, me.Id);
        }
    }

    private async Task UpdateGameState()
    {
        if (currentGameState == null) return;
        await UpdateGameState(currentGameState.Id);
    }
    private async Task UpdateGameState(Guid gameStateId)
    {
        if (currentGameState == null) return;
        GameState? recievedState = await TTTClient.GetGameState(gameStateId);
        if (recievedState == null) return;
        currentGameState = recievedState;
    }
    private async Task HandleOpponentFound(Guid opponentId)
    {
        Snackbar.Add($"Opponent found!{opponentId}", Severity.Success);
        await TTTClient.StartGame(new(me.Id, opponentId, gameTypeId));
    }

}
