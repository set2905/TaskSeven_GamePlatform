@page "/tictactoe"
@using System.Text.Json;
@using System.Text.Encodings.Web;
@using System.Text.Unicode;
@using TaskSeven_GamePlatform.Client.Services.Interfaces;
@using TaskSeven_GamePlatform.Shared.Models;
@inject ITicTacToeClientService TTTClient
@inject IPlayerClientService PlayerService
@inject IHubTicTacToeClient TTTHub
@inject ISnackbar Snackbar


<PageTitle>Tic Tac Toe</PageTitle>
<MudOverlay @bind-Visible="@nameDialogVisible" DarkBackground="true">
    <MudPaper Class="pa-12">
        <MudStack AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <p>Your name</p>
            <MudTextField @bind-Value="@playerName" Class="mt-3" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSubmitName" Class="px-10">Submit</MudButton>
        </MudStack>
    </MudPaper>
</MudOverlay>
<MudOverlay OnClick="@Restart" @bind-Visible="@isGameOver" DarkBackground="true">
    <MudPaper>
        <MudText Typo="Typo.h3">@gameOverMessage</MudText>
    </MudPaper>
</MudOverlay>
<MudOverlay @bind-Visible="@isLoading" DarkBackground="true">
    <MudPaper Class="pa-12">
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" Style="width:100%" />
        <MudText Align="Align.Center" Typo="Typo.h4">@loadingMessage</MudText>
    </MudPaper>
</MudOverlay>
<MudGrid>
    <MudItem xs="12">
        <MudPaper Style="height:80vh" Class="d-flex align-center justify-center mud-height-full mud-width-full py-8">
            <MudGrid>
                <MudItem xs="3">
                    <MudText Class="d-none d-md-block" Align="Align.Center" Typo="Typo.h6">
                        You
                    </MudText>
                </MudItem>
                <MudItem Class="d-flex flex-column align-center justify-center" xs="6">
                    <MudText>
                        @turnCounter
                    </MudText>
                    <div class="game">
                        <div class="board">
                            <div class="square top left" tabindex="0">
                                <div class="@cellValues[0] mud-height-full mud-width-full">
                                    <MudButton Class="mud-height-full mud-width-full" OnClick="()=>Move(0)" />
                                </div>
                            </div>
                            <div class="square top" tabindex="0">
                                <div class="@cellValues[1] mud-height-full mud-width-full">
                                    <MudButton Class="mud-height-full mud-width-full" OnClick="()=>Move(1)" />
                                </div>
                            </div>
                            <div class="square top right" tabindex="0">
                                <div class="@cellValues[2] mud-height-full mud-width-full">
                                    <MudButton Class="mud-height-full mud-width-full" OnClick="()=>Move(2)" />
                                </div>
                            </div>
                            <div class="square left" tabindex="0">
                                <div class="@cellValues[3] mud-height-full mud-width-full">
                                    <MudButton Class="mud-height-full mud-width-full" OnClick="()=>Move(3)" />
                                </div>
                            </div>
                            <div class="square" tabindex="0">
                                <div class="@cellValues[4] mud-height-full mud-width-full">
                                    <MudButton Class="mud-height-full mud-width-full" OnClick="()=>Move(4)" />
                                </div>
                            </div>
                            <div class="square right" tabindex="0">
                                <div class="@cellValues[5] mud-height-full mud-width-full">
                                    <MudButton Class="mud-height-full mud-width-full" OnClick="()=>Move(5)" />
                                </div>
                            </div>
                            <div class="square bottom left" tabindex="0">
                                <div class="@cellValues[6] mud-height-full mud-width-full">
                                    <MudButton Class="mud-height-full mud-width-full" OnClick="()=>Move(6)" />
                                </div>
                            </div>
                            <div class="square bottom" tabindex="0">
                                <div class="@cellValues[7] mud-height-full mud-width-full">
                                    <MudButton Class="mud-height-full mud-width-full" OnClick="()=>Move(7)" />
                                </div>
                            </div>
                            <div class="square bottom right" tabindex="0">
                                <div class="@cellValues[8] mud-height-full mud-width-full">
                                    <MudButton Class="mud-height-full mud-width-full" OnClick="()=>Move(8)" />
                                </div>
                            </div>
                        </div>
                    </div>
                </MudItem>
                <MudItem xs="3">
                    <MudText Class="d-none d-md-block" Align="Align.Center" Typo="Typo.h6">
                        @opponent.Name
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

</MudGrid>



@code {

    private static System.Timers.Timer countDownTurnTimer = new System.Timers.Timer(1000);
    private int turnCounter;
    private JsonSerializerOptions options = new JsonSerializerOptions
        {
            Encoder = JavaScriptEncoder.Create(UnicodeRanges.BasicLatin, UnicodeRanges.Cyrillic),
        };
    private DialogOptions nameDialogOptions = new() { FullWidth = true };
    private bool nameDialogVisible = true;
    private string playerName = string.Empty;
    private string cellValueTag = "div";
    private string[] cellValues = Enumerable.Repeat(string.Empty, 9).ToArray();
    private bool isLoading = false;
    private bool isGameOver = false;
    private string loadingMessage = "Looking for opponent...";
    private string gameOverMessage = "Game Over";
    private GameState? currentGameState;
    private Guid gameTypeId;
    private Player? player;
    private Player opponent = new("Opponent");

    protected override async Task OnInitializedAsync()
    {
        nameDialogVisible=true;
        StateHasChanged();
        countDownTurnTimer.Elapsed += CountDownTimer;

    }
    private async Task Restart()
    {
        cellValues = Enumerable.Repeat(string.Empty, 9).ToArray();
        loadingMessage = "Looking for opponent...";
        isGameOver = false;
        isLoading = true;
        opponent=new("Opponent");
        currentGameState = null;
        await TryFindOpponent();
    }
    private async Task TryFindOpponent()
    {
        while (opponent.Id == default)
        {
            Player? foundOpponent = await TTTClient.StartGameSearch(new(player.Id, gameTypeId));
            if (foundOpponent != null)
            {
                loadingMessage = "Opponent found! Waiting for game to start.";
                await TTTHub.NotifyFoundYou(foundOpponent.ConnectionId, player.Id);
                opponent = foundOpponent;
            }
            await Task.Delay(7000);
        }
    }
    private async Task InitializePlayer(string name)
    {
        player = await PlayerService.SetPlayerName(new(name));
        string ConnectionId = await TTTHub.Initialize();
        TTTHub.OnGameStateUpdate += UpdateGameState;
        TTTHub.OnOpponentFoundYou += HandleOpponentFoundYou;
        TTTHub.OnGameStarted += HandleGameStart;
        await PlayerService.SetPlayerConnectionId(new(ConnectionId, player.Id));
    }

    private async Task UpdateGameState()
    {
        if (currentGameState == null) return;
        await UpdateGameState(currentGameState.Id);
    }
    private async Task UpdateGameState(Guid gameStateId)
    {
        GameState? recievedState = await TTTClient.GetGameState(gameStateId);
        if (recievedState == null) return;
        currentGameState = recievedState;
        int[]? field = JsonSerializer.Deserialize<int[]>(currentGameState.Field, options);
        for (int i = 0; i<field.Length; i++)
        {
            if (field[i] == 0) cellValues[i] = "o";
            if (field[i] == 1) cellValues[i] = "x";
        }
        if (currentGameState.IsGameOver)
        {
            isGameOver = true;
            if (currentGameState.Winner != null)
                gameOverMessage = currentGameState.Winner.Id == player.Id ? "Game over! You win!" : "Game over! You lose!";

            if (currentGameState.IsDraw == true)
                gameOverMessage = "Game over! Draw!";
        }
        RestartTimer();
        StateHasChanged();

    }
    private async Task HandleGameStart(Guid gameStateId)
    {
        isLoading = false;
        StateHasChanged();
        await UpdateGameState(gameStateId);
    }
    private async Task HandleOpponentFoundYou(Guid opponentId)
    {
        isLoading = false;
        Snackbar.Add("Opponent found!", Severity.Success);
        Guid? gameStateId = await TTTClient.StartGame(new(player.Id, opponentId, gameTypeId));
        if (gameStateId!=null)
        {
            Player? found = await TTTClient.GetPlayer(opponentId);
            if (found==null)
            {
                ShowError("Opponent found, but opponent id is not correct!");
                return;
            }
            opponent = found;
            if (opponent.ConnectionId==null)
            {
                ShowError("Opponent found, but opponent connection id is null!");
                return;
            }
            await TTTHub.NotifyGameStarted(opponent.ConnectionId, (Guid)gameStateId);
            await UpdateGameState((Guid)gameStateId);
            StateHasChanged();

        }
    }
    private async Task Move(int pos)
    {
        if (currentGameState == null||player==null||opponent.ConnectionId==null) return;
        bool? result = await TTTClient.Move(new(player.Id, currentGameState.Id, pos));
        if (result == null) return;
        if (result == true)
        {
            await UpdateGameState();
            await TTTHub.NotifyGameStateUpdate(opponent.ConnectionId);
        }
    }
    private void ShowError(string message)
    {
        Snackbar.Add(message, Severity.Error);
    }
    private async Task OnSubmitName()
    {
        if (playerName.Length == 0) return;
        nameDialogVisible = false;
        isLoading = true;
        loadingMessage = "Initializing player...";
        StateHasChanged();

        await InitializePlayer(playerName);
        loadingMessage = "Looking for opponent...";
        StateHasChanged();
        gameTypeId = Guid.Parse("706C2E99-6F6C-4472-81A5-43C56E11637C");
        await TryFindOpponent();

    }
    public void RestartTimer()
    {
        if (currentGameState == null) return;
        turnCounter = currentGameState.SecondsPerMove;
        StateHasChanged();
        countDownTurnTimer.Enabled = true;
    }

    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (turnCounter > 0)
        {
            turnCounter -= 1;
        }
        else
        {
            countDownTurnTimer.Enabled = false;
            UpdateGameState();
        }
        InvokeAsync(StateHasChanged);
    }
}
