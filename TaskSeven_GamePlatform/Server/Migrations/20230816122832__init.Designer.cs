// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskSeven_GamePlatform.Server.Domain;

#nullable disable

namespace TaskSeven_GamePlatform.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230816122832__init")]
    partial class _init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskSeven_GamePlatform.Shared.Models.GameState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDraw")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGameOver")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastMove")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovesLeft")
                        .HasColumnType("int");

                    b.Property<Guid?>("Player1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Player2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SecondsPerMove")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("TaskSeven_GamePlatform.Shared.Models.GameTypeId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FieldSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("TaskSeven_GamePlatforms.Shared.Models.PlayerId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrentGameTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentGameTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GameStarted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPlaying")
                        .HasColumnType("bit");

                    b.Property<bool>("LookingForOpponent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OpponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WaitingForMove")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrentGameTypeId");

                    b.HasIndex("OpponentId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("TaskSeven_GamePlatform.Shared.Models.GameState", b =>
                {
                    b.HasOne("TaskSeven_GamePlatform.Shared.Models.GameTypeId", "GameTypeId")
                        .WithMany()
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskSeven_GamePlatforms.Shared.Models.PlayerId", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id");

                    b.HasOne("TaskSeven_GamePlatforms.Shared.Models.PlayerId", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id");

                    b.Navigation("GameTypeId");

                    b.Navigation("Player1");

                    b.Navigation("Player2");
                });

            modelBuilder.Entity("TaskSeven_GamePlatforms.Shared.Models.PlayerId", b =>
                {
                    b.HasOne("TaskSeven_GamePlatform.Shared.Models.GameTypeId", "CurrentGameType")
                        .WithMany()
                        .HasForeignKey("CurrentGameTypeId");

                    b.HasOne("TaskSeven_GamePlatforms.Shared.Models.PlayerId", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId");

                    b.Navigation("CurrentGameType");

                    b.Navigation("Opponent");
                });
#pragma warning restore 612, 618
        }
    }
}
